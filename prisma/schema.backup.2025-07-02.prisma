generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id                        Int                        @id @default(autoincrement())
  uuid                      String                     @unique @default(uuid())
  name                      String
  domain                    String                     @unique
  slug                      String?
  description               Json?                      @db.JsonB
  features                  Json?                      @db.JsonB
  settings                  Json?                      @db.JsonB
  categories                Json?                      @db.JsonB
  allowedCountries          Json?                      @db.JsonB
  defaultCurrency           String?                    @db.VarChar(3)
  isActive                  Boolean                    @default(true)
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @updatedAt @db.Timestamptz(6)
  accounts                  Account[]
  subscriptions             TenantSubscription?
  auditLogs                 AuditLog[]
  permissionHealthChecks    PermissionHealthCheck[]
  permissionTemplates       PermissionTemplate[]
  permissionUsageTracking   PermissionUsageTracking[]
  resourceScopedPermissions ResourceScopedPermission[]
  userActivityLogs          UserActivityLog[]
  roles                     Role[]
  permissionAudits          PermissionAudit[]

  @@index([slug])
  @@index([isActive])
}

model Account {
  id                     Int       @id @default(autoincrement())
  uuid                   String    @default(uuid())
  tenantId               Int
  email                  String    @unique
  emailVerified          Boolean   @default(false)
  passwordHash           String?
  accountType            String    @default("personal") @db.VarChar(20)
  phone                  String?   @db.VarChar(30)
  timezone               String?   @db.VarChar(50)
  countryCode            String?   @db.VarChar(2)
  languageLocale         String?   @db.VarChar(10)
  currencyCode           String?   @default("EUR") @db.VarChar(3)
  city                   String?   @db.VarChar(100)
  dateFormat             String?   @db.VarChar(20)
  timeFormat             String?   @db.VarChar(20)
  numberFormat           String?   @db.VarChar(20)
  emailNotifications     Boolean   @default(true)
  smsNotifications       Boolean   @default(false)
  themePreference        String    @default("system") @db.VarChar(20)
  accountCapabilities    Json?     @db.JsonB
  primaryMarketplaceSide String?   @db.VarChar(20)
  allowDualSide          Boolean   @default(false)
  isActive               Boolean   @default(true)
  isVerified             Boolean   @default(false)
  lastLoginAt            DateTime? @db.Timestamptz(6)
  createdAt              DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime  @updatedAt @db.Timestamptz(6)
  tenant                 Tenant    @relation(fields: [tenantId], references: [id])
  users                  User[]

  @@index([tenantId])
  @@index([isActive])
  @@index([uuid])
}

model User {
  id                               Int                        @id @default(autoincrement())
  uuid                             String                     @default(uuid())
  accountId                        Int
  firstName                        String                     @db.VarChar(100)
  lastName                         String                     @db.VarChar(100)
  username                         String                     @unique @db.VarChar(50)
  userType                         String                     @default("individual") @db.VarChar(20)
  profilePhotoUrl                  String?
  bio                              String?                    @db.Text
  website                          String?                    @db.VarChar(255)
  dateOfBirth                      DateTime?                  @db.Date
  gender                           String?                    @db.VarChar(20)
  accountRole                      String                     @default("entity_viewer") @db.VarChar(50)
  canCreateProfiles                Boolean                    @default(false)
  canManageAllProfiles             Boolean                    @default(false)
  canAccessBilling                 Boolean                    @default(false)
  canBookJobs                      Boolean                    @default(false)
  profileApplicationStatus         String?                    @db.VarChar(20)
  profileApprovedAt                DateTime?                  @db.Timestamptz(6)
  profileRejectedAt                DateTime?                  @db.Timestamptz(6)
  totalApplications                Int                        @default(0)
  lastApplicationAt                DateTime?                  @db.Timestamptz(6)
  userHash                         String                     @db.VarChar(64)
  isActive                         Boolean                    @default(true)
  isVerified                       Boolean                    @default(false)
  createdAt                        DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                        DateTime                   @updatedAt @db.Timestamptz(6)
  account                          Account                    @relation(fields: [accountId], references: [id])
  auditLogs                        AuditLog[]
  emergencyAccessLogsAsRevoker     EmergencyAccessLog[]       @relation("EmergencyAccessRevokedBy")
  emergencyAccessLogsAsAdmin       EmergencyAccessLog[]       @relation("EmergencyAccessSuperAdmin")
  permissionHealthChecks           PermissionHealthCheck[]
  permissionTemplatesCreated       PermissionTemplate[]
  permissionUsageTracking          PermissionUsageTracking[]
  recordLocks                      RecordLock[]
  resourceScopedPermissionsGrantor ResourceScopedPermission[] @relation("ResourceScopedPermissionGrantor")
  resourceScopedPermissionsRevoker ResourceScopedPermission[] @relation("ResourceScopedPermissionRevoker")
  resourceScopedPermissionsUser    ResourceScopedPermission[] @relation("ResourceScopedPermissionUser")
  savedSearches                    SavedSearch[]
  userActivityLogs                 UserActivityLog[]
  userRoles                        UserRole[]
  grantedRoles                     UserRole[]                 @relation("GrantedRoles")
  userPermissions                  UserPermission[]
  grantedPermissions               UserPermission[]           @relation("GrantedPermissions")
  permissionAudits                 PermissionAudit[]
  emergencyAccess                  EmergencyAccess[]
  approvedEmergencyAccess          EmergencyAccess[]          @relation("ApprovedEmergencyAccess")
  permissionCache                  UserPermissionCache?

  @@index([accountId])
  @@index([isActive])
  @@index([uuid])
  @@index([userHash])
}

model Role {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(50)
  code            String             @unique @db.VarChar(50)
  level           Int                @default(0)
  description     String?            @db.Text
  isSystem        Boolean            @default(false)
  createdAt       DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime           @updatedAt @db.Timestamptz(6)
  tenantId        Int?
  tenant          Tenant?            @relation(fields: [tenantId], references: [id])
  permissions     RolePermission[]
  users           UserRole[]
  permissionSets  RolePermissionSet[]

  @@unique([name, tenantId])
  @@index([code])
  @@index([level])
  @@index([tenantId])
}

model Permission {
  id                        Int                        @id @default(autoincrement())
  name                      String                     @unique @db.VarChar(100)
  pattern                   String?                    @unique @db.VarChar(100)
  resource                  String?                    @db.VarChar(50)
  action                    String?                    @db.VarChar(50)
  scope                     String?                    @db.VarChar(20)
  description               String?                    @db.Text
  isWildcard                Boolean                    @default(false)
  priority                  Int                        @default(100)
  createdAt                 DateTime                   @default(now()) @db.Timestamptz(6)
  updatedAt                 DateTime                   @updatedAt @db.Timestamptz(6)
  roles                     RolePermission[]
  permissionUsageTracking   PermissionUsageTracking[]
  resourceScopedPermissions ResourceScopedPermission[]
  userPermissions           UserPermission[]
  permissionSetItems        PermissionSetItem[]
  parentInheritances        PermissionInheritance[]    @relation("ParentPermission")
  childInheritances         PermissionInheritance[]    @relation("ChildPermission")

  @@index([resource, action, scope])
  @@index([pattern])
  @@index([isWildcard, priority])
}

model RolePermission {
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
}

model UserRole {
  userId      Int
  roleId      Int
  validFrom   DateTime  @default(now()) @db.Timestamptz(6)
  validUntil  DateTime? @db.Timestamptz(6)
  grantedBy   Int?
  grantReason String?   @db.Text
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(6)
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantor     User?     @relation("GrantedRoles", fields: [grantedBy], references: [id])

  @@id([userId, roleId])
  @@index([roleId])
  @@index([validUntil])
}

model OptionSet {
  id          Int           @id @default(autoincrement())
  uuid        String        @default(uuid())
  slug        String        @db.VarChar(100)
  label       String        @db.VarChar(255)
  tenantId    Int?
  description String?       @db.Text
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  values      OptionValue[]

  @@unique([slug, tenantId])
  @@index([uuid])
  @@index([tenantId])
  @@index([isActive])
}

model OptionValue {
  id               Int       @id @default(autoincrement())
  uuid             String    @default(uuid())
  optionSetId      Int
  value            String    @db.VarChar(255)
  label            String    @db.VarChar(255)
  order            Int       @default(0)
  canonicalRegion  String?   @db.VarChar(10)
  regionalMappings Json?     @db.JsonB
  metadata         Json?     @db.JsonB
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)
  optionSet        OptionSet @relation(fields: [optionSetId], references: [id], onDelete: Cascade)

  @@unique([optionSetId, value])
  @@index([uuid])
  @@index([isActive])
}

model Category {
  id            Int           @id @default(autoincrement())
  uuid          String        @default(uuid())
  slug          String        @unique @db.VarChar(100)
  name          String        @db.VarChar(255)
  description   String?       @db.Text
  parentId      Int?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt @db.Timestamptz(6)
  parent        Category?     @relation("Subcategories", fields: [parentId], references: [id], onDelete: Restrict)
  subcategories Category[]    @relation("Subcategories")
  tags          CategoryTag[]

  @@index([parentId])
  @@index([isActive])
  @@index([uuid])
}

model Tag {
  id          Int           @id @default(autoincrement())
  uuid        String        @default(uuid())
  slug        String        @unique @db.VarChar(100)
  name        String        @db.VarChar(255)
  description String?       @db.Text
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt @db.Timestamptz(6)
  categories  CategoryTag[]

  @@index([isActive])
  @@index([uuid])
}

model CategoryTag {
  categoryId Int
  tagId      Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([categoryId, tagId])
  @@index([tagId])
}

model Currency {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(3)
  name      String   @db.VarChar(100)
  symbol    String?  @db.VarChar(10)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([isActive])
}

model Country {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(2)
  name      String   @db.VarChar(100)
  dialCode  String?  @db.VarChar(10)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([isActive])
}

model Language {
  id         Int      @id @default(autoincrement())
  code       String   @unique @db.VarChar(10)
  name       String   @db.VarChar(100)
  nativeName String?  @db.VarChar(100)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)

  @@index([isActive])
}

model SubscriptionPlan {
  id           Int                  @id @default(autoincrement())
  uuid         String               @unique @default(uuid())
  name         String               @db.VarChar(100)
  description  String?              @db.Text
  price        Decimal              @db.Decimal(10, 2)
  currency     String               @db.VarChar(3)
  billingCycle String               @db.VarChar(20)
  isPublic     Boolean              @default(true)
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @db.Timestamptz(6)
  features     PlanFeatureLimit[]
  tenants      TenantSubscription[]

  @@index([isPublic, isActive])
}

model Feature {
  id          Int                @id @default(autoincrement())
  uuid        String             @unique @default(uuid())
  key         String             @unique @db.VarChar(50)
  name        String             @db.VarChar(100)
  description String?            @db.Text
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @db.Timestamptz(6)
  plans       PlanFeatureLimit[]

  @@index([isActive])
}

model PlanFeatureLimit {
  id        Int              @id @default(autoincrement())
  planId    Int
  featureId Int
  limit     Int
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @db.Timestamptz(6)
  feature   Feature          @relation(fields: [featureId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, featureId])
  @@index([featureId])
}

model TenantSubscription {
  id        Int              @id @default(autoincrement())
  tenantId  Int              @unique
  planId    Int
  startDate DateTime         @db.Timestamptz(6)
  endDate   DateTime?        @db.Timestamptz(6)
  status    String           @db.VarChar(20)
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @db.Timestamptz(6)
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  tenant    Tenant           @relation(fields: [tenantId], references: [id])

  @@index([planId])
  @@index([status])
  @@index([endDate])
}

model AuditLog {
  id         BigInt   @id @default(autoincrement())
  tenantId   Int
  userId     Int?
  action     String   @db.VarChar(100)
  entityType String   @db.VarChar(50)
  entityId   String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  ipAddress  String?  @db.VarChar(45)
  metadata   Json?    @db.JsonB
  newValues  Json?    @db.JsonB
  oldValues  Json?    @db.JsonB
  userAgent  String?  @db.Text
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@index([action])
  @@map("audit_logs")
}

model UserActivityLog {
  id        BigInt   @id @default(autoincrement())
  tenantId  Int
  userId    Int?
  action    String   @db.VarChar(100)
  metadata  Json?    @db.JsonB
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  ipAddress String?  @db.VarChar(45)
  method    String?  @db.VarChar(10)
  params    Json?    @db.JsonB
  path      String?  @db.VarChar(500)
  sessionId String?  @db.VarChar(255)
  userAgent String?  @db.Text
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([tenantId, createdAt])
  @@index([userId, createdAt])
  @@index([action])
  @@index([sessionId])
  @@map("user_activity_logs")
}

model RecordLock {
  entityType String   @db.VarChar(50)
  entityId   String   @db.VarChar(255)
  lockedBy   Int
  lockedAt   DateTime @default(now()) @db.Timestamptz(6)
  expiresAt  DateTime @db.Timestamptz(6)
  reason     String?  @db.Text
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [lockedBy], references: [id])

  @@unique([entityType, entityId])
  @@index([expiresAt])
  @@index([lockedBy])
  @@map("record_locks")
}

model SavedSearch {
  id              Int      @id @default(autoincrement())
  uuid            String   @default(uuid())
  userId          Int
  tenantId        Int
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  entityType      String   @db.VarChar(50)
  filters         Json     @db.JsonB
  sortBy          String?  @db.VarChar(50)
  sortOrder       String?  @db.VarChar(4)
  columnConfig    Json?    @db.JsonB
  searchValue     String?  @db.Text
  paginationLimit Int?
  isDefault       Boolean  @default(false)
  isPublic        Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, name])
  @@index([tenantId, entityType])
  @@index([userId, entityType])
  @@index([isActive])
  @@map("saved_searches")
}

model EmergencyAccessLog {
  id               Int       @id @default(autoincrement())
  superAdminId     Int
  targetEntityType String    @db.VarChar(50)
  targetEntityId   Int
  actionType       String    @db.VarChar(50)
  justification    String    @db.Text
  durationMinutes  Int?
  expiresAt        DateTime? @db.Timestamptz(6)
  revokedAt        DateTime? @db.Timestamptz(6)
  revokedBy        Int?
  revokeReason     String?   @db.Text
  ipAddress        String?   @db.VarChar(45)
  userAgent        String?   @db.Text
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)
  revokedByUser    User?     @relation("EmergencyAccessRevokedBy", fields: [revokedBy], references: [id])
  superAdmin       User      @relation("EmergencyAccessSuperAdmin", fields: [superAdminId], references: [id])

  @@index([superAdminId])
  @@index([targetEntityType, targetEntityId])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("emergency_access_logs")
}

model PermissionTemplate {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  description      String?  @db.Text
  category         String   @db.VarChar(50)
  targetEntityType String   @db.VarChar(50)
  templateData     Json     @db.JsonB
  isSystem         Boolean  @default(false)
  isActive         Boolean  @default(true)
  createdBy        Int?
  tenantId         Int?
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)
  creator          User?    @relation(fields: [createdBy], references: [id])
  tenant           Tenant?  @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
  @@index([category])
  @@index([targetEntityType])
  @@index([tenantId])
  @@index([isActive])
  @@map("permission_templates")
}

model PermissionHealthCheck {
  id               Int       @id @default(autoincrement())
  checkType        String    @db.VarChar(50)
  entityType       String    @db.VarChar(50)
  entityId         Int?
  status           String    @default("pending") @db.VarChar(20)
  severity         String    @default("info") @db.VarChar(20)
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  issuesFound      Json?     @db.JsonB
  recommendations  Json?     @db.JsonB
  autoFixAvailable Boolean   @default(false)
  autoFixApplied   Boolean   @default(false)
  checkedBy        Int?
  tenantId         Int?
  scheduledAt      DateTime? @db.Timestamptz(6)
  startedAt        DateTime? @db.Timestamptz(6)
  completedAt      DateTime? @db.Timestamptz(6)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)
  checker          User?     @relation(fields: [checkedBy], references: [id])
  tenant           Tenant?   @relation(fields: [tenantId], references: [id])

  @@index([entityType, entityId])
  @@index([status])
  @@index([severity])
  @@index([tenantId])
  @@map("permission_health_checks")
}

model ResourceScopedPermission {
  id                 Int                       @id @default(autoincrement())
  userId             Int
  permissionId       Int
  resourceType       String                    @db.VarChar(50)
  resourceIdentifier String                    @db.VarChar(255)
  scopeConditions    Json?                     @db.JsonB
  grantedBy          Int
  grantedAt          DateTime                  @default(now()) @db.Timestamptz(6)
  expiresAt          DateTime?                 @db.Timestamptz(6)
  revokedAt          DateTime?                 @db.Timestamptz(6)
  revokedBy          Int?
  revokeReason       String?                   @db.Text
  tenantId           Int?
  createdAt          DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime                  @updatedAt @db.Timestamptz(6)
  usageTracking      PermissionUsageTracking[]
  grantor            User                      @relation("ResourceScopedPermissionGrantor", fields: [grantedBy], references: [id])
  permission         Permission                @relation(fields: [permissionId], references: [id])
  revoker            User?                     @relation("ResourceScopedPermissionRevoker", fields: [revokedBy], references: [id])
  tenant             Tenant?                   @relation(fields: [tenantId], references: [id])
  user               User                      @relation("ResourceScopedPermissionUser", fields: [userId], references: [id])

  @@unique([userId, permissionId, resourceType, resourceIdentifier])
  @@index([userId])
  @@index([permissionId])
  @@index([resourceType, resourceIdentifier])
  @@index([tenantId])
  @@index([expiresAt])
  @@map("resource_scoped_permissions")
}

model PermissionUsageTracking {
  id                         Int                       @id @default(autoincrement())
  userId                     Int
  permissionId               Int
  resourceScopedPermissionId Int?
  actionPerformed            String                    @db.VarChar(100)
  resourceAccessed           String?                   @db.VarChar(255)
  success                    Boolean                   @default(true)
  errorMessage               String?                   @db.Text
  ipAddress                  String?                   @db.VarChar(45)
  userAgent                  String?                   @db.Text
  tenantId                   Int?
  performedAt                DateTime                  @default(now()) @db.Timestamptz(6)
  permission                 Permission                @relation(fields: [permissionId], references: [id])
  resourceScopedPermission   ResourceScopedPermission? @relation(fields: [resourceScopedPermissionId], references: [id])
  tenant                     Tenant?                   @relation(fields: [tenantId], references: [id])
  user                       User                      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([permissionId])
  @@index([performedAt])
  @@index([tenantId])
  @@map("permission_usage_tracking")
}
// ============================================
// OPTIMIZED RBAC MODELS
// ============================================

model PermissionSet {
  id          Int                 @id @default(autoincrement())
  name        String              @unique @db.VarChar(50)
  description String?             @db.Text
  createdAt   DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(6)
  permissions PermissionSetItem[]
  roles       RolePermissionSet[]
}

model PermissionSetItem {
  setId        Int
  permissionId Int
  set          PermissionSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  permission   Permission    @relation(fields: [permissionId], references: [id])

  @@id([setId, permissionId])
  @@index([permissionId])
}

model RolePermissionSet {
  roleId Int
  setId  Int
  role   Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  set    PermissionSet @relation(fields: [setId], references: [id])

  @@id([roleId, setId])
  @@index([setId])
}

model PermissionInheritance {
  parentId Int
  childId  Int
  parent   Permission @relation("ParentPermission", fields: [parentId], references: [id])
  child    Permission @relation("ChildPermission", fields: [childId], references: [id])

  @@id([parentId, childId])
  @@index([childId])
}

model UserPermission {
  userId       Int
  permissionId Int
  granted      Boolean   @default(true)
  validFrom    DateTime  @default(now()) @db.Timestamptz(6)
  validUntil   DateTime? @db.Timestamptz(6)
  grantedBy    Int?
  grantReason  String?   @db.Text
  resourceType String?   @db.VarChar(50)
  resourceId   String?   @db.VarChar(255)
  conditions   Json?     @db.JsonB
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @db.Timestamptz(6)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id])
  grantor      User?     @relation("GrantedPermissions", fields: [grantedBy], references: [id])

  @@id([userId, permissionId])
  @@index([permissionId])
  @@index([granted])
  @@index([validUntil])
  @@index([resourceType, resourceId])
}

model PermissionAudit {
  id               BigInt    @id @default(autoincrement())
  userId           Int
  permissionPattern String    @db.VarChar(100)
  resource         String?   @db.VarChar(255)
  action           String    @db.VarChar(50)
  granted          Boolean
  ipAddress        String?   @db.VarChar(45)
  userAgent        String?   @db.Text
  requestId        String?   @db.VarChar(36)
  checkDurationMs  Int?
  tenantId         Int?
  timestamp        DateTime  @default(now()) @db.Timestamptz(6)
  user             User      @relation(fields: [userId], references: [id])
  tenant           Tenant?   @relation(fields: [tenantId], references: [id])

  @@index([userId, timestamp])
  @@index([permissionPattern])
  @@index([granted])
  @@index([tenantId, timestamp])
  @@index([timestamp])
}

model EmergencyAccess {
  id            Int       @id @default(autoincrement())
  userId        Int
  targetType    String    @db.VarChar(50)
  targetId      String    @db.VarChar(255)
  justification String    @db.Text
  grantedAt     DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt     DateTime  @db.Timestamptz(6)
  revokedAt     DateTime? @db.Timestamptz(6)
  approvedBy    Int?
  approvedAt    DateTime? @db.Timestamptz(6)
  user          User      @relation(fields: [userId], references: [id])
  approver      User?     @relation("ApprovedEmergencyAccess", fields: [approvedBy], references: [id])

  @@index([userId])
  @@index([expiresAt])
  @@index([targetType, targetId])
}

model UserPermissionCache {
  userId       Int      @id
  permissions  Json     @db.JsonB
  computedAt   DateTime @db.Timestamptz(6)
  expiresAt    DateTime @db.Timestamptz(6)
  cacheVersion Int      @default(1)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

model PermissionExpansion {
  pattern          String   @id @db.VarChar(100)
  expandedPatterns Json     @db.JsonB
  computedAt       DateTime @db.Timestamptz(6)

  @@index([computedAt])
}

model RBACConfig {
  id                     Int      @id @default(1)
  enableWildcards        Boolean  @default(true)
  enableInheritance      Boolean  @default(true)
  enableCaching          Boolean  @default(true)
  cacheExpirationMinutes Int      @default(15)
  maxPermissionsPerUser  Int      @default(1000)
  enableAuditLog         Boolean  @default(true)
  auditRetentionDays     Int      @default(90)
  updatedAt              DateTime @updatedAt @db.Timestamptz(6)
}