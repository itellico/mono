#!/bin/bash

# Setup and run Docusaurus documentation server locally (without Docker)
# This script sets up Docusaurus directly using Node.js

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}╔═══════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║   Docusaurus Local Setup Script           ║${NC}"
echo -e "${CYAN}╚═══════════════════════════════════════════╝${NC}"
echo ""

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo -e "${RED}✗ Node.js is not installed${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Node.js is installed ($(node -v))${NC}"

# Check if pnpm is installed
if ! command -v pnpm &> /dev/null; then
    echo -e "${RED}✗ pnpm is not installed${NC}"
    exit 1
fi

echo -e "${GREEN}✓ pnpm is installed${NC}"

# Create docs-site directory if it doesn't exist
DOCS_DIR="docs-site"
if [ ! -d "$DOCS_DIR" ]; then
    echo -e "${YELLOW}Creating Docusaurus project...${NC}"
    mkdir -p "$DOCS_DIR"
fi

cd "$DOCS_DIR"

# Initialize package.json if it doesn't exist
if [ ! -f "package.json" ]; then
    echo -e "${YELLOW}Initializing package.json...${NC}"
    cat > package.json << 'EOF'
{
  "name": "itellico-mono-docs",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start --port 3005",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve --port 3005",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "3.5.2",
    "@docusaurus/preset-classic": "3.5.2",
    "@mdx-js/react": "^3.0.0",
    "clsx": "^2.0.0",
    "prism-react-renderer": "^2.3.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "3.5.2",
    "@docusaurus/types": "3.5.2"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 3 chrome version",
      "last 3 firefox version",
      "last 5 safari version"
    ]
  },
  "engines": {
    "node": ">=18.0"
  }
}
EOF
fi

# Install dependencies
echo -e "${YELLOW}Installing Docusaurus dependencies...${NC}"
pnpm install

# Create docusaurus.config.js if it doesn't exist
if [ ! -f "docusaurus.config.js" ]; then
    echo -e "${YELLOW}Creating Docusaurus configuration...${NC}"
    cat > docusaurus.config.js << 'EOF'
// @ts-check
import {themes as prismThemes} from 'prism-react-renderer';

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'itellico Mono Documentation',
  tagline: 'Multi-tenant SaaS Platform Documentation',
  favicon: 'img/favicon.ico',
  url: 'http://localhost:3005',
  baseUrl: '/',
  organizationName: 'itellico',
  projectName: 'mono',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },
  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          routeBasePath: '/',
          sidebarPath: './sidebars.js',
          path: '../docs',
        },
        blog: false,
        theme: {
          customCss: './src/css/custom.css',
        },
      }),
    ],
  ],
  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'itellico Mono',
        items: [
          {
            type: 'docSidebar',
            sidebarId: 'tutorialSidebar',
            position: 'left',
            label: 'Docs',
          },
          {
            href: 'http://localhost:3000',
            label: 'App',
            position: 'right',
          },
        ],
      },
      footer: {
        style: 'dark',
        copyright: `Copyright © ${new Date().getFullYear()} itellico Mono.`,
      },
      prism: {
        theme: prismThemes.github,
        darkTheme: prismThemes.dracula,
        additionalLanguages: ['typescript', 'json', 'bash', 'yaml'],
      },
    }),
};

export default config;
EOF
fi

# Create sidebars.js if it doesn't exist
if [ ! -f "sidebars.js" ]; then
    echo -e "${YELLOW}Creating sidebars configuration...${NC}"
    cat > sidebars.js << 'EOF'
/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],
};
export default sidebars;
EOF
fi

# Create necessary directories
mkdir -p src/css src/pages static/img

# Create custom CSS if it doesn't exist
if [ ! -f "src/css/custom.css" ]; then
    echo -e "${YELLOW}Creating custom CSS...${NC}"
    cat > src/css/custom.css << 'EOF'
:root {
  --ifm-color-primary: #2563eb;
  --ifm-color-primary-dark: #1d4ed8;
  --ifm-color-primary-darker: #1e40af;
  --ifm-color-primary-darkest: #1e3a8a;
  --ifm-color-primary-light: #3b82f6;
  --ifm-color-primary-lighter: #60a5fa;
  --ifm-color-primary-lightest: #93bbfc;
  --ifm-code-font-size: 95%;
}

[data-theme='dark'] {
  --ifm-color-primary: #60a5fa;
  --ifm-color-primary-dark: #3b82f6;
  --ifm-color-primary-darker: #2563eb;
  --ifm-color-primary-darkest: #1d4ed8;
  --ifm-color-primary-light: #93bbfc;
  --ifm-color-primary-lighter: #dbeafe;
  --ifm-color-primary-lightest: #eff6ff;
}
EOF
fi

# Create a simple logo if it doesn't exist
if [ ! -f "static/img/logo.svg" ]; then
    echo -e "${YELLOW}Creating logo...${NC}"
    cat > static/img/logo.svg << 'EOF'
<svg width="40" height="40" xmlns="http://www.w3.org/2000/svg">
  <rect width="40" height="40" rx="8" fill="#2563eb"/>
  <text x="20" y="25" font-family="Arial" font-size="16" font-weight="bold" text-anchor="middle" fill="white">M</text>
</svg>
EOF
fi

# Create favicon if it doesn't exist
if [ ! -f "static/img/favicon.ico" ]; then
    echo -e "${YELLOW}Creating favicon...${NC}"
    # Copy from main project if exists
    if [ -f "../public/favicon.ico" ]; then
        cp ../public/favicon.ico static/img/favicon.ico
    else
        touch static/img/favicon.ico
    fi
fi

# Create .gitignore
if [ ! -f ".gitignore" ]; then
    cat > .gitignore << 'EOF'
node_modules/
.docusaurus/
.cache-loader/
build/
.env.local
.DS_Store
EOF
fi

# Start Docusaurus
echo -e "${BLUE}Starting Docusaurus documentation server...${NC}"
echo -e "${YELLOW}This may take a moment on first run...${NC}"
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║   Documentation will be available at:     ║${NC}"
echo -e "${GREEN}║   http://localhost:3005                   ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════╝${NC}"
echo ""
echo -e "${YELLOW}Press Ctrl+C to stop the server${NC}"
echo ""

# Start the development server
pnpm start