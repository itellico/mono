#!/bin/bash

# Fix API Routes - Convert all Next.js API routes with direct database access to proxy to NestJS
# ✅ ARCHITECTURE COMPLIANCE: Ensures all database access goes through NestJS

echo "🔧 Starting API Routes Fix..."
echo "Converting Next.js API routes to proxy to NestJS..."
echo ""

# Count violations before fix
TOTAL_VIOLATIONS=$(find /Users/mm2/dev_mm/mono/apps/web/src/app/api -type f -name "*.ts" -exec grep -l "import.*{.*db.*}.*from.*['\"]@/lib/db" {} \; | wc -l | tr -d ' ')
echo "Found $TOTAL_VIOLATIONS API routes with direct database access"
echo ""

# Create a template for proxy routes
cat > /tmp/proxy-route-template.ts << 'EOF'
/**
 * @fileoverview {{ROUTE_NAME}} API Route - Proxy to NestJS API
 * 
 * ✅ ARCHITECTURE COMPLIANCE: This route now proxies to NestJS API
 * All business logic, permissions, and database access are handled by NestJS
 * 
 * @generated by fix-api-routes.sh
 */

import { NextRequest } from 'next/server';
import { proxyGET, proxyPOST, proxyPUT, proxyPATCH, proxyDELETE } from '@/lib/api-proxy';

{{METHODS}}
EOF

# Function to generate method exports based on existing methods
generate_methods() {
    local file=$1
    local methods=""
    
    # Check for GET method
    if grep -q "export async function GET" "$file"; then
        methods="${methods}/**
 * GET {{ROUTE_PATH}}
 * Proxy to NestJS GET {{ROUTE_PATH}}
 */
export async function GET(request: NextRequest) {
  return proxyGET(request);
}

"
    fi
    
    # Check for POST method
    if grep -q "export async function POST" "$file"; then
        methods="${methods}/**
 * POST {{ROUTE_PATH}}
 * Proxy to NestJS POST {{ROUTE_PATH}}
 */
export async function POST(request: NextRequest) {
  return proxyPOST(request);
}

"
    fi
    
    # Check for PUT method
    if grep -q "export async function PUT" "$file"; then
        methods="${methods}/**
 * PUT {{ROUTE_PATH}}
 * Proxy to NestJS PUT {{ROUTE_PATH}}
 */
export async function PUT(request: NextRequest) {
  return proxyPUT(request);
}

"
    fi
    
    # Check for PATCH method
    if grep -q "export async function PATCH" "$file"; then
        methods="${methods}/**
 * PATCH {{ROUTE_PATH}}
 * Proxy to NestJS PATCH {{ROUTE_PATH}}
 */
export async function PATCH(request: NextRequest) {
  return proxyPATCH(request);
}

"
    fi
    
    # Check for DELETE method
    if grep -q "export async function DELETE" "$file"; then
        methods="${methods}/**
 * DELETE {{ROUTE_PATH}}
 * Proxy to NestJS DELETE {{ROUTE_PATH}}
 */
export async function DELETE(request: NextRequest) {
  return proxyDELETE(request);
}

"
    fi
    
    echo "$methods"
}

# Process each API route file
find /Users/mm2/dev_mm/mono/apps/web/src/app/api -type f -name "route.ts" | while read -r file; do
    # Check if file has direct database access
    if grep -q "import.*{.*db.*}.*from.*['\"]@/lib/db" "$file"; then
        # Extract route path
        route_path=$(echo "$file" | sed 's|/Users/mm2/dev_mm/mono/apps/web/src/app||' | sed 's|/route.ts||')
        route_name=$(basename "$(dirname "$file")")
        
        echo "📝 Converting: $route_path"
        
        # Generate methods
        methods=$(generate_methods "$file")
        
        # Create new content from template
        cp /tmp/proxy-route-template.ts /tmp/new-route.ts
        sed -i '' "s|{{ROUTE_NAME}}|$route_name|g" /tmp/new-route.ts
        sed -i '' "s|{{ROUTE_PATH}}|$route_path|g" /tmp/new-route.ts
        sed -i '' "s|{{METHODS}}|$methods|g" /tmp/new-route.ts
        
        # Backup original file
        cp "$file" "${file}.backup"
        
        # Replace file content
        cp /tmp/new-route.ts "$file"
        
        echo "   ✅ Converted to proxy"
    fi
done

echo ""
echo "🎉 API Routes fix completed!"
echo ""

# Count violations after fix
REMAINING_VIOLATIONS=$(find /Users/mm2/dev_mm/mono/apps/web/src/app/api -type f -name "*.ts" -exec grep -l "import.*{.*db.*}.*from.*['\"]@/lib/db" {} \; | wc -l | tr -d ' ')
echo "Remaining API routes with direct database access: $REMAINING_VIOLATIONS"
echo ""

echo "⚠️  IMPORTANT NOTES:"
echo "1. Make sure NestJS API has corresponding endpoints for all converted routes"
echo "2. Test all converted routes to ensure they work correctly"
echo "3. Original files are backed up with .backup extension"
echo "4. The api-proxy.ts utility handles authentication and request forwarding"