
services:
  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: mono-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Mailpit - Email Testing
  mailpit:
    image: axllent/mailpit:latest
    container_name: mono-mailpit
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "4025:8025"  # Web UI port (moved from 8025 to avoid 8000 range)
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 3

  # N8N - Workflow Automation (Simplified with SQLite)
  n8n:
    image: n8nio/n8n:latest
    container_name: mono-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=sqlite
      - DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./docker/n8n/workflows:/home/node/.n8n/workflows
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server (PostgreSQL mode using external DB)
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: mono-temporal
    restart: unless-stopped
    ports:
      - "7233:7233"  # Temporal Server
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=developer
      - POSTGRES_PWD=developer
      - POSTGRES_SEEDS=host.docker.internal
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/docker.yaml
      - ENABLE_ES=false
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Temporal Web UI
  temporal-web:
    image: temporalio/ui:2.21.3
    container_name: mono-temporal-web
    restart: unless-stopped
    ports:
      - "4080:8080"  # Temporal Web UI (moved from 8080 to avoid 8000 range)
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:4080
    networks:
      - mono-network
    depends_on:
      temporal:
        condition: service_healthy

  # RedisInsight - Redis GUI
  redis-insight:
    image: redis/redisinsight:latest
    container_name: mono-redis-insight
    restart: unless-stopped
    ports:
      - "5540:5540"
    environment:
      - REDISINSIGHT_HOST=0.0.0.0
      - REDISINSIGHT_PORT=5540
    volumes:
      - redis_insight_data:/data
      - ./docker/redis-insight/connections.json:/data/connections.json
    networks:
      - mono-network
      - mono-test-network
    depends_on:
      redis:
        condition: service_healthy

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mono-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mono-network

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mono-grafana
    restart: unless-stopped
    ports:
      - "5005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/mono-homepage.json
    volumes:
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - mono-network
    depends_on:
      - prometheus

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mono-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mono-network

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: mono-cadvisor
    restart: unless-stopped
    ports:
      - "4081:8080"  # cAdvisor (moved from 8081 to avoid 8000 range)
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - mono-network

  # PHP-FPM for Clickdummy site
  php:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    container_name: mono-php
    restart: unless-stopped
    volumes:
      - ./click-dummy:/var/www/html:ro
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini:ro
    networks:
      - mono-network
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - DB_NAME=mono
      - DB_USER=developer
      - DB_PASSWORD=developer

  # Nginx for Clickdummy site
  nginx:
    image: nginx:alpine
    container_name: mono-nginx
    restart: unless-stopped
    ports:
      - "4040:80"  # Avoiding 8000 range, using 4040
    volumes:
      - ./click-dummy:/var/www/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      - mono-network
    depends_on:
      - php
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  redis_data:
  redis_insight_data:
  n8n_data:
  temporal_data:
  prometheus_data:
  grafana_data:

networks:
  mono-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  mono-test-network:
    external: true