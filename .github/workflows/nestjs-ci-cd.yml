name: NestJS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'apps/api-nest/**'
      - '.github/workflows/nestjs-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api-nest/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: itellico/mono-nestjs-api
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Code Quality and Testing
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-alpine
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'apps/api-nest/pnpm-lock.yaml'

      - name: Install dependencies
        working-directory: apps/api-nest
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        working-directory: apps/api-nest
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run ESLint
        working-directory: apps/api-nest
        run: pnpm lint

      - name: Run Prettier check
        working-directory: apps/api-nest
        run: pnpm format:check

      - name: Run TypeScript check
        working-directory: apps/api-nest
        run: pnpm type-check

      - name: Run unit tests
        working-directory: apps/api-nest
        run: pnpm test --coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://test:test@localhost:5672
          JWT_SECRET: test-jwt-secret
          COOKIE_SECRET: test-cookie-secret
          NODE_ENV: test

      - name: Run E2E tests
        working-directory: apps/api-nest
        run: pnpm test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://test:test@localhost:5672
          JWT_SECRET: test-jwt-secret
          COOKIE_SECRET: test-cookie-secret
          NODE_ENV: test

      - name: Performance benchmark
        working-directory: apps/api-nest
        run: timeout 60s pnpm tsx src/benchmark/load-test.ts || true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          RABBITMQ_URL: amqp://test:test@localhost:5672
          JWT_SECRET: test-jwt-secret
          COOKIE_SECRET: test-cookie-secret
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: apps/api-nest/coverage/lcov.info
          flags: nestjs
          name: nestjs-coverage

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            apps/api-nest/coverage/
            apps/api-nest/test-results/

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        working-directory: apps/api-nest
        run: npm audit --audit-level=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/api-nest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api-nest
          file: ./apps/api-nest/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    environment: staging
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Deploy to staging
        env:
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update Kustomization with new image
          cd k8s/staging
          kustomize edit set image nestjs-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Apply changes
          kubectl apply -k .
          
          # Wait for rollout
          kubectl rollout status deployment/nestjs-api -n mono-staging --timeout=300s
          
          # Run smoke tests
          kubectl wait --for=condition=available --timeout=300s deployment/nestjs-api -n mono-staging
          
          # Get service URL and test
          STAGING_URL=$(kubectl get service nestjs-api-service -n mono-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f http://$STAGING_URL/api/v1/public/health

      - name: Run integration tests against staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
        run: |
          cd apps/api-nest
          STAGING_API_URL=$STAGING_API_URL pnpm test:integration

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-scan, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Pre-deployment backup
        env:
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Create database backup
          kubectl exec deployment/postgres -n mono-production -- \
            pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Store backup in artifact
          echo "backup-$(date +%Y%m%d-%H%M%S).sql" > backup-filename.txt

      - name: Deploy to production
        env:
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update Kustomization with new image
          cd k8s/production
          kustomize edit set image nestjs-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Apply changes with rolling update strategy
          kubectl apply -k .
          
          # Wait for rollout with extended timeout
          kubectl rollout status deployment/nestjs-api -n mono-production --timeout=600s
          
          # Verify deployment
          kubectl wait --for=condition=available --timeout=300s deployment/nestjs-api -n mono-production

      - name: Run post-deployment health checks
        env:
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Health check
          curl -f $PRODUCTION_API_URL/api/v1/public/health
          
          # Metrics check
          curl -f $PRODUCTION_API_URL/metrics
          
          # Database connectivity check
          kubectl exec deployment/nestjs-api -n mono-production -- \
            node -e "require('./dist/common/prisma/prisma.service.js').default.user.count().then(console.log)"

      - name: Run production smoke tests
        env:
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        run: |
          cd apps/api-nest
          PRODUCTION_API_URL=$PRODUCTION_API_URL pnpm test:smoke

      - name: Update deployment tracking
        run: |
          echo "Deployment completed at $(date)" >> deployment-log.txt
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> deployment-log.txt
          echo "Commit: ${{ github.sha }}" >> deployment-log.txt

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 NestJS API deployed to production successfully!
            
            📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            🔗 Commit: ${{ github.sha }}
            🌐 URL: ${{ secrets.PRODUCTION_API_URL }}
            ⏰ Deployed at: $(date)

      - name: Notify failed deployment
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ❌ NestJS API deployment to production failed!
            
            📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            🔗 Commit: ${{ github.sha }}
            📋 Check the workflow logs for details.
        if: failure()

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Cleanup old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'mono-nestjs-api'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: false

# Optional: Manual rollback workflow
  rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Rollback deployment
        env:
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
          ROLLBACK_TO: ${{ github.event.inputs.rollback_to || 'previous' }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Rollback to previous version
          kubectl rollout undo deployment/nestjs-api -n mono-production
          
          # Wait for rollback to complete
          kubectl rollout status deployment/nestjs-api -n mono-production --timeout=300s
          
          # Verify rollback
          kubectl wait --for=condition=available --timeout=300s deployment/nestjs-api -n mono-production

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🔄 NestJS API rolled back in production
            
            ⏰ Rollback completed at: $(date)
            📋 Reason: Manual rollback triggered