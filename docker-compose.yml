services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mono-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mono
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: developer
      POSTGRES_MULTIPLE_DATABASES: mono,temporal,kanboard
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - mono-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer -d mono"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: mono-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: mono-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
      - "15692:15692" # Prometheus metrics port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_NODENAME: rabbit@mono-rabbitmq
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,info}] disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Mailpit - Email Testing
  mailpit:
    image: axllent/mailpit:latest
    container_name: mono-mailpit
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "4025:8025"  # Web UI port (moved from 8025 to avoid 8000 range)
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - mono-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 3

  # N8N - Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: mono-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=developer
      - DB_POSTGRESDB_PASSWORD=developer
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_SECURE_COOKIE=false  # Disable secure cookie for local development
    volumes:
      - n8n_data:/home/node/.n8n
      - ./docker/n8n/workflows:/home/node/.n8n/workflows
    networks:
      - mono-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: mono-temporal
    restart: unless-stopped
    ports:
      - "7233:7233"  # Temporal Server
      - "8233:8233"  # Temporal Web UI
      - "9091:9091"  # Temporal Prometheus metrics
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=developer
      - POSTGRES_PWD=developer
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=/etc/temporal/config/dynamicconfig/development.yaml
      - ENABLE_ES=false
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - PROMETHEUS_ENDPOINT=0.0.0.0:9091
    volumes:
      - temporal_data:/etc/temporal
      - ./docker/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    networks:
      - mono-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 15s
      timeout: 10s
      retries: 10

  # Temporal Web UI
  temporal-web:
    image: temporalio/ui:latest
    container_name: mono-temporal-web
    restart: unless-stopped
    ports:
      - "4080:8080"  # Temporal Web UI (moved from 8080 to avoid 8000 range)
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:4080
      - TEMPORAL_PERMIT_WRITE_API=true
    networks:
      - mono-network
    depends_on:
      temporal:
        condition: service_healthy

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: mono-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - mono-network

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mono-grafana
    restart: unless-stopped
    ports:
      - "5005:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/mono-homepage.json
    volumes:
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    networks:
      - mono-network
    depends_on:
      - prometheus

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: mono-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mono-network

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: mono-cadvisor
    restart: unless-stopped
    ports:
      - "4081:8080"  # cAdvisor (moved from 8081 to avoid 8000 range)
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - mono-network

  # PHP-FPM for Clickdummy site
  php:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    container_name: mono-php
    restart: unless-stopped
    volumes:
      - ./php:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/custom.ini:ro
    networks:
      - mono-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mono
      - DB_USER=developer
      - DB_PASSWORD=developer

  # Nginx for Click-dummy site (root on port 4040)
  nginx-clickdummy:
    image: nginx:alpine
    container_name: mono-nginx-clickdummy
    restart: unless-stopped
    ports:
      - "4040:80"  # Click-dummy at root
    volumes:
      - ./php/click-dummy:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/clickdummy-root.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - mono-network
    depends_on:
      - php
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Nginx for Kanboard (root on port 4041)
  nginx-kanboard:
    image: nginx:alpine
    container_name: mono-nginx-kanboard
    restart: unless-stopped
    ports:
      - "4041:80"  # Kanboard at root
    volumes:
      - ./php/kanboard:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d/kanboard-root.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - mono-network
    depends_on:
      - php
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # RedisInsight - Redis GUI
  redis-insight:
    image: redis/redisinsight:latest
    container_name: mono-redis-insight
    restart: unless-stopped
    ports:
      - "5540:5540"
    environment:
      - REDISINSIGHT_HOST=0.0.0.0
      - REDISINSIGHT_PORT=5540
    volumes:
      - redisinsight_data:/data
    networks:
      - mono-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5540/healthcheck/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Click-dummy - Interactive PHP prototypes
  # Access at: http://localhost:4040/
  
  # Kanboard - Project Management
  # Access at: http://localhost:4041/
  # To reinstall: ./scripts/setup-kanboard-local.sh

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:
  rabbitmq_data:
  n8n_data:
  temporal_data:
  prometheus_data:
  grafana_data:
  kanboard_data:
  kanboard_plugins:

networks:
  mono-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16